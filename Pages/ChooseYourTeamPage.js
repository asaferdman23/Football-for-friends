import React, { useState, useEffect, useRef } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, TextInput, KeyboardAvoidingView } from 'react-native';
import { firebase } from '../firebase';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { Alert } from 'react-native';

const ChooseYourTeamPage = () => {
  const navigation = useNavigation();
  const [isGroupLeader, setIsGroupLeader] = useState(false);
  const [groupName, setGroupName] = useState('');
  const [groupCode, setGroupCode] = useState('');
  const [autoGeneratedCode, setAutoGeneratedCode] = useState('');
  const [intervalId, setIntervalId] = useState(null);
  const intervalRef = useRef(null);
  const [groupNameConfirmation, setGroupNameConfirmation] = useState('');
  const [groupCodeConfirmation, setGroupCodeConfirmation] = useState('');
  const currentUser = firebase.auth().currentUser;

  const handleAutoGenerateCodePress = () => {
    console.log('Auto-generate code button pressed');
    const intervalId = setInterval(() => {
      let code = Math.floor(Math.random() * 900000) + 100000; // Generate 6-digit code
      setAutoGeneratedCode(code.toString());
    }, 10000); // Generate a new code every 10 seconds
    setIntervalId(intervalId);
  };

  const startAutoGenerateCode = () => {
    if (!intervalId) {
      handleAutoGenerateCodePress();
    }
  };

  const stopAutoGenerateCode = () => {
    if (intervalId) {
      clearInterval(intervalRef.current);
    }
  };

  const handleCreateTeamPress = async () => {
    console.log('Create team button pressed');
    if (isGroupLeader) {
      // Handle creating a new group
      if(currentUser){
        setGroupNameConfirmation(groupName);
        setGroupCodeConfirmation(autoGeneratedCode);
        Alert.alert(
          'Confirm group details',
          `Group Name: ${groupName}\nGroup Code: ${autoGeneratedCode}`,
          [
            {
              text: 'Cancel',
              style: 'cancel'
            },
            {
              text: 'OK',
              onPress: () => {
                firebase.firestore().collection('teams').add({
                  groupName: groupName,
                  groupLeader: currentUser.uid,
                  groupMembers: [currentUser.uid],
                  groupCode: autoGeneratedCode,
                }).then(() => {
                  navigation.navigate('MainContainer');
                  console.log('New team added');
                })
                .catch((error) => {
                  console.log('Error adding new team:', error);
                });
              }
            }
          ],
          { cancelable: false }
        );
      }
      console.log('Creating a new group with name:', groupName);
      console.log('Creating a group with code:', autoGeneratedCode);
  
    } else {
      if (currentUser) {
        firebase
          .firestore()
          .collection('teams')
          .where('groupCode', '==', groupCode)
          .get()
          .then((querySnapshot) => {
            if (!querySnapshot.empty) {
              const team = querySnapshot.docs[0].data();
              if (!team.groupMembers.includes(currentUser.uid)) {
                firebase
                  .firestore()
                  .collection('teams')
                  .doc(querySnapshot.docs[0].id)
                  .update({
                    groupMembers: [...team.groupMembers, currentUser.uid],
                  })
                  .then(() => {
                    navigation.navigate('MainContainer');
                    console.log('Joined team successfully');
                  })
                  .catch((error) => {
                    console.log('Error joining team:', error);
                  });
              } else {
                console.log('You are already a member of this team');
              }
            } else {
              console.log('Team not found');
            }
          })
          .catch((error) => {
            console.log('Error finding team:', error);
          });
      }
    }
  };
  

  return (
    <KeyboardAvoidingView style={styles.container} behavior="padding">
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" size={24} color="black" />
        </TouchableOpacity>
        <Text style={styles.title}>Create Your Team</Text>
      </View>
      <View style={styles.container}>
        <View style={styles.radioButtonContainer}>
          <TouchableOpacity
            style={styles.radioButton}
            onPress={() => setIsGroupLeader(false)}
          >
            <Text style={styles.radioButtonText}>Join a team</Text>
            <Text style={styles.radioButtonDescription}>
              Join an existing team by entering the group code.
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.radioButton}
            onPress={() => setIsGroupLeader(true)}
          >
            <Text style={styles.radioButtonText}>Create a team</Text>
            <Text style={styles.radioButtonDescription}>
              Create a new team and invite others to join.
            </Text>
          </TouchableOpacity>
        </View>
        {isGroupLeader ? (
          <View style={styles.inputContainer}>
            <TextInput
            style={styles.input}
            placeholder="Group name"
            value={groupName}
            onChangeText={(text) => setGroupName(text)}
            onFocus={() => startAutoGenerateCode()}
            onBlur={() => clearInterval(intervalId.current)}
          />
            <TextInput
              style={styles.input}
              placeholder="Group id"
              value={autoGeneratedCode}
              onChangeText={(text) => setAutoGeneratedCode(text)}
              editable={false}
            />
          </View>
        ) : (
          <View style={styles.inputContainer}>
            <TextInput
              style={styles.input}
              placeholder="Group code"
              value={groupCode}
              onChangeText={(text) => setGroupCode(text)}
            />
          </View>
        )}
        <TouchableOpacity style={styles.createTeamButton} onPress={handleCreateTeamPress}>
          <Text style={styles.createTeamButtonText}>
            {isGroupLeader ? 'Create team' : 'Join team'}
          </Text>
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#97c6d1',
    flex: 1,
    alignItems: 'center',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginTop: 50,
    width: '100%',
  },
  title: {
    fontSize: 40,
    textAlign: 'center',
    marginTop: 40,
    flex: 1,
  },
  backButton: {
    width: 30,
    height: 30,
    marginRight: 20,
  },
  radioButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 60,
  },
  radioButton: {
    backgroundColor: 'white',
    marginHorizontal: 10,
    padding: 10,
    borderRadius: 5,
    width: '40%',
  },
  radioButtonText: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  radioButtonDescription: {
    fontSize: 14,
    color: '#777',
  },
  inputContainer: {
    marginTop: 40,
  },
  input: {
    width: '80%',
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  createTeamButton: {
    backgroundColor: '#97c6d1'
  },
  createTeamButtonText: {
    fontSize: 20,
    color: 'white',
    textAlign: 'center',
    padding: 10,
  },
});


export default ChooseYourTeamPage;